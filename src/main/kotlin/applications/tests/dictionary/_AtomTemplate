import symmetrical.cosmic._physics.atomic.atoms.Atom
import symmetrical.cosmic._physics._subatomic.luminescent.IMatter
import symmetrical.cosmic._physics._subatomic.luminescent.Matter
import symmetrical.cosmic._physics._subatomic.bosons.Photon

class _CLASSNAME_(
    private val matter: IMatter = Matter(_CLASSNAME_::class, _CLASSNAME_::class),
) : Atom(),
    IMatter by matter
{
    constructor() : this(
        Matter(_CLASSNAME_::class, _CLASSNAME_::class),
    ) init {

    }
    override fun absorb(photon: Photon) : Photon {
       matter.check(photon);

       var remainder = photon.propagate()
       remainder = super.absorb(remainder)
       return remainder
   }
   override fun emit() : Photon {
       val classId = matter.getClassId()
       return Photon(radiate())
   }
   override fun getClassId() : String {
       return matter.getClassId()
   }
   private fun radiate() : String {
       return matter.getClassId()+
              super.emit().radiate();
   }


}